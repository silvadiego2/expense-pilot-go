import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/auth/AuthProvider';
import { toast } from 'sonner';
import { useQueryClient } from '@tanstack/react-query';

export const useDataReset = () => {
  const [isResetting, setIsResetting] = useState(false);
  const { user } = useAuth();
  const queryClient = useQueryClient();

  const deleteAllUserData = async () => {
    if (!user) {
      toast.error('UsuÃ¡rio nÃ£o autenticado');
      return { success: false };
    }

    setIsResetting(true);

    try {
      // Ordem de deleÃ§Ã£o respeitando foreign keys
      const deletions = [
        // 1. TransaÃ§Ãµes (tem FKs para contas/categorias)
        { table: 'transactions', name: 'TransaÃ§Ãµes' },
        
        // 2. TransaÃ§Ãµes sincronizadas
        { table: 'synced_transactions', name: 'TransaÃ§Ãµes Sincronizadas' },
        
        // 3. OrÃ§amentos (tem FK para categorias)
        { table: 'budgets', name: 'OrÃ§amentos' },
        
        // 4. Metas financeiras
        { table: 'goals', name: 'Metas Financeiras' },
        
        // 5. Regras de automaÃ§Ã£o
        { table: 'automation_rules', name: 'Regras de AutomaÃ§Ã£o' },
        
        // 6. NotificaÃ§Ãµes
        { table: 'notifications', name: 'NotificaÃ§Ãµes' },
        
        // 7. ConexÃµes bancÃ¡rias
        { table: 'bank_connections', name: 'ConexÃµes BancÃ¡rias' },
        
        // 8. Contas e cartÃµes
        { table: 'accounts', name: 'Contas e CartÃµes' },
        
        // 9. Categorias personalizadas (mantÃ©m as padrÃ£o criadas no signup)
        { table: 'categories', name: 'Categorias Personalizadas', where: "created_at > (auth.jwt() -> 'user_metadata' ->> 'created_at')::timestamptz + interval '1 minute'" },
      ];

      for (const deletion of deletions) {
        const { error } = await supabase
          .from(deletion.table as any)
          .delete()
          .eq('user_id', user.id);

        if (error) {
          console.error(`Erro ao deletar ${deletion.name}:`, error);
          throw new Error(`Falha ao deletar ${deletion.name}`);
        }

        toast.info(`âœ“ ${deletion.name} removido(a)`);
      }

      // Invalidar todas as queries para forÃ§ar re-fetch
      queryClient.invalidateQueries({ queryKey: ['accounts'] });
      queryClient.invalidateQueries({ queryKey: ['transactions'] });
      queryClient.invalidateQueries({ queryKey: ['budgets'] });
      queryClient.invalidateQueries({ queryKey: ['goals'] });
      queryClient.invalidateQueries({ queryKey: ['categories'] });
      queryClient.invalidateQueries({ queryKey: ['automation-rules'] });
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
      queryClient.invalidateQueries({ queryKey: ['bank-connections'] });

      toast.success('ðŸŽ‰ Todos os dados foram removidos com sucesso!');
      
      return { success: true };
      
    } catch (error: any) {
      console.error('Erro ao resetar dados:', error);
      toast.error(error.message || 'Erro ao limpar dados');
      return { success: false };
      
    } finally {
      setIsResetting(false);
    }
  };

  return {
    deleteAllUserData,
    isResetting
  };
};
